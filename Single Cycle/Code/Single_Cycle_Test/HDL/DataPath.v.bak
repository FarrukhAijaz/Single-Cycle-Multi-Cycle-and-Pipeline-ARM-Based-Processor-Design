// Datapath.v
module Datapath(
    input clk, 
	 input PCSrc,
	 input BX_ctrl,
	 input RegSrc,
	 input BL_ctrl,
	 input Move_ctrl,
	 input ALUSrc,
	 input MemtoReg;
	 
	 
	 
	 
	 
	 
	 
	 
    // Include other inputs like control signals
    // ...
);


wire Instr [31:0],
wire [31:0] PCPlus4; 
wire [31:0] Result;
wire [31:0] PC_prime;
wire [31:0] WriteData;
wire [31:0] mux1_out;
wire [3:0] RA1;
wire [3:0] RA2;
wire [3:0] A3;
wire [31:0] WD3;
wire [31:0] RD1;
wire [31:0] RD2;
wire [31:0] shift_input;
wire [31:0] shift_output;
wire [31:0] ExtImm;
wire [31:0] SrcA;
wire [31:0] SrcB;
wire [31:0] ReadData;
wire [31:0] ALUResult;





Mux2to1 #(32) MUX1 
	(
        .data0(PCPlus4),
        .data1(Result),
        .select(PCSrc),
        .out(mux1_out)
    );
Mux2to1 #(32) MUX2 
	(
        .data0(mux1_out),
        .data1(WriteData),
        .select(BX_ctrl),
        .out(PC_prime)
    );
Mux2to1 #(4) MUX3 
	(
        .data0(Instr [19:16]),
        .data1(4b'1111),
        .select(RegSrc),
        .out(RA1)
    );
Mux2to1 #(4) MUX4
	(
        .data0(Instr [3:0]),
        .data1(Instr [15:12]),
        .select(RegSrc),
        .out(RA2)
    );
Mux2to1 #(4) MUX5 
	(
        .data0(Instr [15:12]),
        .data1(4b'1110),
        .select(BL_ctrl),
        .out(A3)
    );
Mux2to1 #(32) MUX6 
	(
        .data0(Result),
        .data1(PCPlus4),
        .select(BL_ctrl),
        .out(WD3)
    );
Mux2to1 #(32) MUX7 
	(
        .data0(RD2),
        .data1(Instr [15:12]),
        .select(Move_ctrl),
        .out(shift_input)
    );
Mux2to1 #(32) MUX8 
	(
        .data0(shift_output),
        .data1(ExtImm),
        .select(ALUSrc),
        .out(SrcB)
    );
Mux2to1 #(32) MUX9 
	(
        .data0(ALUResult),
        .data1(ReadData),
        .select(MemtoReg),
        .out(Result)
    );




endmodule
